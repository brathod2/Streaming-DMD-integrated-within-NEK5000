c-----------------------------------------------------------------------
      subroutine interpolation
c
c     evaluate velocity, temperature, pressure and ps-scalars 
c     for list of points and dump results
c     note: read/write on rank0 only 
c
c     ASSUMING LHIS IS MAX NUMBER OF POINTS TO READ IN ON ONE PROCESSOR

      include 'SIZE'
      include 'TOTAL'

      parameter(nfldm=ldim)

      real pts, fieldout, dist, rst
      common /c_hptsr/ pts      (ldim,lhis)
     $               , fieldout (nfldm,lhis)
     $               , dist     (lhis)
     $               , rst      (lhis*ldim)

      common /nekmpi/ nidd,npp,nekcomm,nekgroup,nekreal

      integer rcode, elid, proc
      common /c_hptsi/ rcode(lhis),elid(lhis),proc(lhis)

      common /scrcg/  pm1 (lx1,ly1,lz1,lelv) ! mapped pressure
      common /outtmp/ wrk (lx1*ly1*lz1*lelt,nfldm)
      

      logical iffind

      integer icalld,npoints,npts
      save    icalld,npoints,npts
      data    icalld  /0/
      data    npoints /0/

      save    inth_hpts

      nxyz  = lx1*ly1*lz1
      ntot  = nxyz*nelt 
      nbuff = lhis      ! point to be read in on 1 proc.

      toldist = 5e-6
      
      if(nio.eq.0) write(6,*) 'dump history points'
c      print *, "hpts routine entered successfully"
      if(icalld.eq.0) then
        npts  = lhis      ! number of points per proc
        call hpts_in(pts,npts,npoints)

        tol     = 5e-13
        n       = lx1*ly1*lz1*lelt
        npt_max = 128
        nxf     = 2*lx1 ! fine mesh for bb-test
        nyf     = 2*ly1
        nzf     = 2*lz1
        bb_t    = 0.01 ! relative size to expand bounding boxes by
        call fgslib_findpts_setup(inth_hpts,nekcomm,np,ldim,
     &                            xm1,ym1,zm1,lx1,ly1,lz1,
     &                            nelt,nxf,nyf,nzf,bb_t,n,n,
     &                            npt_max,tol)
      endif


      call prepost_map(0)  ! maps axisymm and pressure

      ! pack working array
      nflds = 0
      if(ifvo) then
        call copy(wrk(1,1),vx,ntot)
        call copy(wrk(1,2),vy,ntot)
        if(if3d) call copy(wrk(1,3),vz,ntot)
        nflds = ldim
      endif
      if(ifpo) then
        nflds = nflds + 1
        call copy(wrk(1,nflds),pm1,ntot)
      endif
      if(ifto) then
        nflds = nflds + 1
        call copy(wrk(1,nflds),t,ntot)
      endif
      do i = 1,ldimt
         if(ifpsco(i)) then
           nflds = nflds + 1
           call copy(wrk(1,nflds),T(1,1,1,1,i+1),ntot)
         endif
      enddo
      
      ! interpolate
      if(icalld.eq.0) then
        call fgslib_findpts(inth_hpts,rcode,1,
     &                      proc,1,
     &                      elid,1,
     &                      rst,ldim,
     &                      dist,1,
     &                      pts(1,1),ldim,
     &                      pts(2,1),ldim,
     &                      pts(3,1),ldim,npts)
     
        nfail = 0 
        do i=1,npts
           ! check return code 
           if(rcode(i).eq.1) then
             if(sqrt(dist(i)).gt.toldist) then
               nfail = nfail + 1
               IF (NFAIL.LE.5) WRITE(6,'(a,1p4e15.7)') 
     &     ' WARNING: point on boundary or outside the mesh xy[z]d^2:'
     &     ,(pts(k,i),k=1,ldim),dist(i)
             endif   
           elseif(rcode(i).eq.2) then
             nfail = nfail + 1
             if (nfail.le.5) write(6,'(a,1p3e15.7)') 
     &        ' WARNING: point not within mesh xy[z]: !',
     &        (pts(k,i),k=1,ldim)
           endif
        enddo
        print *, "WARNING nfail:", nfail
        icalld = 1
      endif

        
      ! evaluate input field at given points
      do ifld = 1,nflds
         call fgslib_findpts_eval(inth_hpts,fieldout(ifld,1),nfldm,
     &                            rcode,1,
     &                            proc,1,
     &                            elid,1,
     &                            rst,ldim,npts,
     &                            wrk(1,ifld))
      enddo
      ! write interpolation results to hpts.out
 
c      print *, "fieldout size", shape(fieldout)

      call hpts_out_custom(fieldout,nflds,nfldm,npoints,nbuff)

      call prepost_map(1)  ! maps back axisymm arrays

      return
      end
c-----------------------------------------------------------------------
      subroutine hpts_out_custom(fieldout,nflds,nfldm,npoints,nbuff)

      include 'SIZE'
      include 'TOTAL'

      real buf(nfldm,nbuff),fieldout(nfldm,nbuff)
      common /dmd_interpolation/uvw(linterpol,ldim)
      integer j

      len = wdsize*nfldm*nbuff

c      print *, "nbuff", nbuff
c      print *, "npoints", npoints
      npass = npoints/nbuff + 1
      il = mod(npoints,nbuff)
c      print *, "il", il
      if(il.eq.0) then
         il = nbuff
         print *, "inside il", il
         npass = npass-1
      endif

      do ipass = 1,npass

        call nekgsync

        if(ipass.lt.npass) then
          if(nid.eq.0) then
            call crecv(ipass,buf,len)
            do ip = 1,nbuff
              write(50,'(1p20E15.7)') time,
     &         (buf(i,ip), i=1,nflds)
            enddo
          elseif(nid.eq.ipass) then
            call csend(ipass,fieldout,len,0,nid)
          endif

        else  !ipass.eq.npass

          if(nid.eq.0) then
            print *, "il", il
            do ip = 1,il
              do j=1,nflds
              uvw(ip,j)=fieldout(j,ip)
              enddo
            enddo
          endif

        endif
      enddo

      return
      end
c-----------------------------------------------------------------------
